#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const opn = require('opn');

const Device = require('../lib/device');
const DeviceManager = require('../lib/device.manager');
const WebApp = require('../lib/app');
const logger = require('../lib/utils/logger');
const dConfig = require('../config/device.config');

program
  .version('1.0.0', '-v, --version')
  .description('A CLI Tool for running a Thincloud Test Device')
  .option('-c, --config [config_file]', 'Configuration File to Use')
  .option('-s, --create-config', 'Create a starter configuration file')
  .option('-p, --port', 'Set port for test device server [default is 8082]')
  .on('--help', () => {
    console.log();
    console.log('  Example:');
    console.log();
    console.log('    $ thincloud-test-device -c /path/to/config_file.json');
    console.log();
    console.log('  Sample Config File:');
    console.log();
    console.log('  {');
    console.log('    "privateKey": "/path/to/private.key",');
    console.log('    "clientCert": "/path/to/client.cert",');
    console.log('    "caCert": "/path/to/rootCA.pem",');
    console.log('    "physicalId": "00:ED:98:45:RR",');
    console.log('    "deviceType": "LIGHT"');
    console.log('  }');
    console.log();
  })
  .parse(process.argv);

if (program.createConfig) {
  const filePath = path.join(process.cwd(), 'sample_device_config.json');
  const sampleConfig = {
    privateKey: '/path/to/private.key',
    clientCert: '/path/to/public.key',
    caCert: '/path/to/rootCA.pem',
    physicalId: 'PHYSICAL_ID',
    deviceType: 'DEVICE_TYPE'
  };
  fs.writeFileSync(filePath, JSON.stringify(sampleConfig, null, 2));
  process.exit(0);
}

function displayError(msg) {
  console.log();
  console.error('--------------------------------------------');
  console.error('                 ERROR');
  console.error('   ' + msg);
  console.error('--------------------------------------------');
  program.help();
}

if (!program.config) {
  return displayError('Missing required configuration file.');
}

if (!program.config.match(/\.json$/)) {
  return displayError('Configuration file should be JSON format.');
}

let configFilePath = program.config;

if (!path.isAbsolute(program.config)) {
  configFilePath = path.join(process.cwd(), program.config);
}

const configFile = require(configFilePath);

const requiredKeys = [
  'privateKey', 'clientCert', 'physicalId', 'deviceType', 'caCert'
];
const configKeys = Object.keys(configFile);

if (!requiredKeys.every(rk => configKeys.indexOf(rk) !== -1)) {
  const missingKeys = requiredKeys.filter(rk => configKeys.indexOf(rk) === -1);
  const msg = 'Missing configuration for [ ' + missingKeys.join(', ') + ' ]';
  return displayError(msg);
}

const files = configKeys.reduce((acc, key) => {
  if (key.match(/Key/)) {
    let filePath = configFile[key];
    if (Buffer.isBuffer(filePath)) {
      acc[key] = filePath;
      return acc;
    }
    else if (typeof(filePath) === 'string' && filePath.match(/BEGIN/) && filePath.match(/END/)) {
      acc[key] = Buffer.from(filePath);
      return acc;
    }
    else if (!path.isAbsolute(filePath)) {
      filePath = path.join(configFilePath, configFile[key]);
      if (!fs.existsSync(filePath)) {
        return displayError('Can\'t find ' + key + '. Please make sure it\'s an absolute path and file exists.');
      }
    } else {
      const file = fs.readFileSync(filePath, { encoding: 'utf8' });
      acc[key] = Buffer.from(file);
    }
  }
  return acc;
}, {});

const configuration = Object.assign(configFile, files);

// Now run the test device program
const thincloudDeviceConfig = dConfig.create(configuration);

const workerId = Math.floor(Math.random() * 100);
const workerLogger = logger.child({workerId});
workerLogger.info({workerId}, 'start worker');

let deviceManager = new DeviceManager({
  workerId: workerId,
  hostName: process.env.HOST || 'ThincloudTestDevice',
  logger: workerLogger,
});

deviceManager.init()
.then((data) => {
  workerLogger.warn({data}, 'device init');
  const app = new WebApp(deviceManager);
  if (program.port) {
    app.app.set('port', program.port);
  }
  app.start();
  const port = app.app.get('port');
  console.log(`Application running at http://localhost:${port}`);
  opn(`http://localhost:${port}`);
}, (err) => {
  workerLogger.error({err}, 'device exception');
})

